
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 4.0.1.Psw2dxmTpiGAUbo6WVZHeS2FdqD1G73pWY2/bjGTUOU=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
namespace LibToFuzz
{
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Attribute : object
    {
        partial void OnInitialized();
        public Attribute()
        {
            checked
            { this.OnInitialized(); }
        }

        public Attribute(Attribute source)
        {
            checked
            {
                this.Key = source.Key;
                this.Value = source.Value;
                this.Values = source.Values?.ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.String Key { get; set; }
        [FlatBufferItem(1)]
        public virtual System.String Value { get; set; }
        [FlatBufferItem(2)]
        public virtual IList<System.String> Values { get; set; }
        public static ISerializer<LibToFuzz.Attribute> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Attribute

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Attribute>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Attribute root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_7362a2b39cc244deba48128789b76afb(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Attribute root)
            {
                checked
                {
                    return GetMaxSizeOf_7362a2b39cc244deba48128789b76afb(root);
                }
            }

            public LibToFuzz.Attribute Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_7362a2b39cc244deba48128789b76afb(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_7362a2b39cc244deba48128789b76afb(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_fe0e950798d04ffa98bf08da3bf45a07(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_fe0e950798d04ffa98bf08da3bf45a07(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_2a60b9858ee547cfab898a1070c5e33f(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_7362a2b39cc244deba48128789b76afb<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_5bb3f8016db64a2593c48373e72d9edc<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_5bb3f8016db64a2593c48373e72d9edc<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_5bb3f8016db64a2593c48373e72d9edc(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_fe0e950798d04ffa98bf08da3bf45a07(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_fe0e950798d04ffa98bf08da3bf45a07(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_2a60b9858ee547cfab898a1070c5e33f(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_7362a2b39cc244deba48128789b76afb<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_fe0e950798d04ffa98bf08da3bf45a07(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_fe0e950798d04ffa98bf08da3bf45a07(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_2a60b9858ee547cfab898a1070c5e33f(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_fe0e950798d04ffa98bf08da3bf45a07(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_fe0e950798d04ffa98bf08da3bf45a07<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_fe0e950798d04ffa98bf08da3bf45a07<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_2a60b9858ee547cfab898a1070c5e33f(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_fe0e950798d04ffa98bf08da3bf45a07(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_2a60b9858ee547cfab898a1070c5e33f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_55b60880d30d461c9e9d8317420dcb9f<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_55b60880d30d461c9e9d8317420dcb9f<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_55b60880d30d461c9e9d8317420dcb9f(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_fe0e950798d04ffa98bf08da3bf45a07(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_2a60b9858ee547cfab898a1070c5e33f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_fe0e950798d04ffa98bf08da3bf45a07(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ConfigEntry : object
    {
        partial void OnInitialized();
        public ConfigEntry()
        {
            checked
            { this.OnInitialized(); }
        }

        public ConfigEntry(ConfigEntry source)
        {
            checked
            {
                this.Tag = source.Tag;
                this.Type = source.Type;
                this.Value = source.Value;
                this.Attributes = source.Attributes?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.FieldName = source.FieldName;
                this.FullType = source.FullType;
                this.Children = source.Children?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Key = source.Key;
                this.Used = source.Used;
                this.Topic = source.Topic;
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.String Tag { get; set; }
        [FlatBufferItem(1)]
        public virtual System.String Type { get; set; }
        [FlatBufferItem(2)]
        public virtual System.String Value { get; set; }
        [FlatBufferItem(3)]
        public virtual IList<global::LibToFuzz.Attribute> Attributes { get; set; }
        [FlatBufferItem(4)]
        public virtual System.String FieldName { get; set; }
        [FlatBufferItem(5)]
        public virtual System.String FullType { get; set; }
        [FlatBufferItem(6)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Children { get; set; }
        [FlatBufferItem(7)]
        public virtual System.String Key { get; set; }
        [FlatBufferItem(8)]
        public virtual System.Boolean Used { get; set; }
        [FlatBufferItem(9)]
        public virtual System.String Topic { get; set; }
        public static ISerializer<LibToFuzz.ConfigEntry> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.ConfigEntry

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.ConfigEntry>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.ConfigEntry root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_e0c3c5ed34714d22be7296be54125a85(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.ConfigEntry root)
            {
                checked
                {
                    return GetMaxSizeOf_e0c3c5ed34714d22be7296be54125a85(root);
                }
            }

            public LibToFuzz.ConfigEntry Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_e0c3c5ed34714d22be7296be54125a85(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_e0c3c5ed34714d22be7296be54125a85(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_a00a98e376694f9c9fe352120531f9c8(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_c099e252bd2d491eb643d655b184855c(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_e0c3c5ed34714d22be7296be54125a85<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_34e119e697594ae7bdb154fd3fad85b2<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_34e119e697594ae7bdb154fd3fad85b2<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_34e119e697594ae7bdb154fd3fad85b2(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_a00a98e376694f9c9fe352120531f9c8(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_c099e252bd2d491eb643d655b184855c(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_c83437e550384a06bc14a6f048d8f546(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_e0c3c5ed34714d22be7296be54125a85<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_a00a98e376694f9c9fe352120531f9c8(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_c099e252bd2d491eb643d655b184855c(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_c83437e550384a06bc14a6f048d8f546(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_df0eecf902304ba289f37ac336c609b7<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_a00a98e376694f9c9fe352120531f9c8(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_9cbedd11d42d40cfafd743b75680a0a5(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_a00a98e376694f9c9fe352120531f9c8<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_01eabb7a8e6242259777151ef33b1cb0<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_01eabb7a8e6242259777151ef33b1cb0<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_01eabb7a8e6242259777151ef33b1cb0(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_9cbedd11d42d40cfafd743b75680a0a5(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_a00a98e376694f9c9fe352120531f9c8<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_9cbedd11d42d40cfafd743b75680a0a5(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_9cbedd11d42d40cfafd743b75680a0a5(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_849dd523755140839cfedd5ab4b15d41(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_9cbedd11d42d40cfafd743b75680a0a5<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_f9906031af824b58aa097eb312ccce38<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_f9906031af824b58aa097eb312ccce38<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_f9906031af824b58aa097eb312ccce38(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_df0eecf902304ba289f37ac336c609b7(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_849dd523755140839cfedd5ab4b15d41(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_9cbedd11d42d40cfafd743b75680a0a5<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_849dd523755140839cfedd5ab4b15d41(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_849dd523755140839cfedd5ab4b15d41(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_df0eecf902304ba289f37ac336c609b7(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_849dd523755140839cfedd5ab4b15d41<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_72f5b63189c04973b8b7cf3d3cbfc91c<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_72f5b63189c04973b8b7cf3d3cbfc91c<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_72f5b63189c04973b8b7cf3d3cbfc91c(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_df0eecf902304ba289f37ac336c609b7(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_849dd523755140839cfedd5ab4b15d41<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_df0eecf902304ba289f37ac336c609b7(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_c099e252bd2d491eb643d655b184855c(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_e0c3c5ed34714d22be7296be54125a85(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_c099e252bd2d491eb643d655b184855c<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_8f06783700c1434d97bbd6971d0b553a<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_8f06783700c1434d97bbd6971d0b553a<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_8f06783700c1434d97bbd6971d0b553a(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_e0c3c5ed34714d22be7296be54125a85(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_c099e252bd2d491eb643d655b184855c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_e0c3c5ed34714d22be7296be54125a85(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_c83437e550384a06bc14a6f048d8f546(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_c83437e550384a06bc14a6f048d8f546<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_c83437e550384a06bc14a6f048d8f546<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class FSeed : object
    {
        partial void OnInitialized();
        public FSeed()
        {
            checked
            { this.OnInitialized(); }
        }

        public FSeed(FSeed source)
        {
            checked
            {
                this.Data = source.Data?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.SensorBytes = source.SensorBytes?.ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Data { get; set; }
        [FlatBufferItem(1)]
        public virtual IList<global::LibToFuzz.Attribute> Meta { get; set; }
        [FlatBufferItem(2)]
        public virtual IList<System.Byte> SensorBytes { get; set; }
        public static ISerializer<LibToFuzz.FSeed> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.FSeed

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.FSeed>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.FSeed root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_d4594874fe2d493cb6ffe91f3b2631de(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.FSeed root)
            {
                checked
                {
                    return GetMaxSizeOf_d4594874fe2d493cb6ffe91f3b2631de(root);
                }
            }

            public LibToFuzz.FSeed Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_d4594874fe2d493cb6ffe91f3b2631de(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_d4594874fe2d493cb6ffe91f3b2631de(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_e56edd4c5dff4a9584bf5fdd0615ddd0(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_fd5f99634ff044e2a80a5ec89015d4ca(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_17d2db1d0cc34f299abb3445d9b2281a(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_d4594874fe2d493cb6ffe91f3b2631de<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_125dd8b2a614444bab9af305704e8025<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_125dd8b2a614444bab9af305704e8025<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_125dd8b2a614444bab9af305704e8025(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_e56edd4c5dff4a9584bf5fdd0615ddd0(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_fd5f99634ff044e2a80a5ec89015d4ca(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_17d2db1d0cc34f299abb3445d9b2281a(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_d4594874fe2d493cb6ffe91f3b2631de<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_e56edd4c5dff4a9584bf5fdd0615ddd0(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_fd5f99634ff044e2a80a5ec89015d4ca(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_17d2db1d0cc34f299abb3445d9b2281a(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_e56edd4c5dff4a9584bf5fdd0615ddd0(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_8b0d20cfc11c404a8690c829ce26d094(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_e56edd4c5dff4a9584bf5fdd0615ddd0<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_02b3d44d5bfd451086d850439b5dc10a<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_02b3d44d5bfd451086d850439b5dc10a<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_02b3d44d5bfd451086d850439b5dc10a(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_8b0d20cfc11c404a8690c829ce26d094(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_e56edd4c5dff4a9584bf5fdd0615ddd0<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_8b0d20cfc11c404a8690c829ce26d094(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_8b0d20cfc11c404a8690c829ce26d094(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_fd5f99634ff044e2a80a5ec89015d4ca(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_e56edd4c5dff4a9584bf5fdd0615ddd0(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_8b0d20cfc11c404a8690c829ce26d094<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_ce72425502b04621ad5ff3b41d96125c<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_ce72425502b04621ad5ff3b41d96125c<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_ce72425502b04621ad5ff3b41d96125c(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_fd5f99634ff044e2a80a5ec89015d4ca(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_e56edd4c5dff4a9584bf5fdd0615ddd0(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_d82ea683a33d4564830ccffe7992af77(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_8b0d20cfc11c404a8690c829ce26d094<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_fd5f99634ff044e2a80a5ec89015d4ca(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_e56edd4c5dff4a9584bf5fdd0615ddd0(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_d82ea683a33d4564830ccffe7992af77(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_cb685ab7277f43cf99f9e98ee3a4dc01<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_fd5f99634ff044e2a80a5ec89015d4ca(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_2137918a12544e7199ad7e1ee52e328a(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_fd5f99634ff044e2a80a5ec89015d4ca<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_244d2d223adb4f2aa044b5613f03c15d<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_244d2d223adb4f2aa044b5613f03c15d<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_244d2d223adb4f2aa044b5613f03c15d(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_2137918a12544e7199ad7e1ee52e328a(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_fd5f99634ff044e2a80a5ec89015d4ca<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_2137918a12544e7199ad7e1ee52e328a(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_2137918a12544e7199ad7e1ee52e328a(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_01410eba43e446338e16ee2378e5a140(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_2137918a12544e7199ad7e1ee52e328a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_f82d652aed4a4f8d9490a20ba53c6239<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_f82d652aed4a4f8d9490a20ba53c6239<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_f82d652aed4a4f8d9490a20ba53c6239(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_cb685ab7277f43cf99f9e98ee3a4dc01(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_01410eba43e446338e16ee2378e5a140(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_2137918a12544e7199ad7e1ee52e328a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_01410eba43e446338e16ee2378e5a140(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_01410eba43e446338e16ee2378e5a140(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_cb685ab7277f43cf99f9e98ee3a4dc01(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_01410eba43e446338e16ee2378e5a140<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_210f54578d3948348d410013a5ffa4bb<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_210f54578d3948348d410013a5ffa4bb<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_210f54578d3948348d410013a5ffa4bb(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_cb685ab7277f43cf99f9e98ee3a4dc01(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_01410eba43e446338e16ee2378e5a140<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_cb685ab7277f43cf99f9e98ee3a4dc01(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_d82ea683a33d4564830ccffe7992af77(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_d82ea683a33d4564830ccffe7992af77<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_d82ea683a33d4564830ccffe7992af77<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_17d2db1d0cc34f299abb3445d9b2281a(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_17d2db1d0cc34f299abb3445d9b2281a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_5bf4bfe86b59475ebcff49a32ba789c8<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_5bf4bfe86b59475ebcff49a32ba789c8<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_5bf4bfe86b59475ebcff49a32ba789c8(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_d787f1facd5848cebd402589460c7908(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_17d2db1d0cc34f299abb3445d9b2281a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_d787f1facd5848cebd402589460c7908(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_d787f1facd5848cebd402589460c7908(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_d787f1facd5848cebd402589460c7908<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_d787f1facd5848cebd402589460c7908<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Downstream : object
    {
        partial void OnInitialized();
        public Downstream()
        {
            checked
            { this.OnInitialized(); }
        }

        public Downstream(Downstream source)
        {
            checked
            {
                this.ShouldSkip = source.ShouldSkip;
                this.ShouldInit = source.ShouldInit;
                this.GotUpstream = source.GotUpstream;
                this.Depth = source.Depth;
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.Seed = source.Seed != null ? new LibToFuzz.FSeed(source.Seed) : null;
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.Boolean ShouldSkip { get; set; }
        [FlatBufferItem(1)]
        public virtual System.Boolean ShouldInit { get; set; }
        [FlatBufferItem(2)]
        public virtual System.Boolean GotUpstream { get; set; }
        [FlatBufferItem(3)]
        public virtual System.UInt32 Depth { get; set; }
        [FlatBufferItem(4)]
        public virtual IList<global::LibToFuzz.Attribute> Meta { get; set; }
        [FlatBufferItem(5)]
        public virtual global::LibToFuzz.FSeed Seed { get; set; }
        public static ISerializer<LibToFuzz.Downstream> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Downstream

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Downstream>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Downstream root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_fd7302ef481541d9a4619258513935a3(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Downstream root)
            {
                checked
                {
                    return GetMaxSizeOf_fd7302ef481541d9a4619258513935a3(root);
                }
            }

            public LibToFuzz.Downstream Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_fd7302ef481541d9a4619258513935a3(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_fd7302ef481541d9a4619258513935a3(LibToFuzz.Downstream value)
            {
                checked
                {

                    int runningSum = 31 + 17;
                    var index4Value = value.Meta;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_e61b110f9ac042289d5b14a18d97ed99(index4Value);
                    }
                    var index5Value = value.Seed;

                    if (index5Value != null)
                    {
                        runningSum += GetMaxSizeOf_173fadb92ca34782bbf2ea7a14b6bbbe(index5Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Downstream Read_fd7302ef481541d9a4619258513935a3<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_48fa30ef6e2445569813b0250c882f9a<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_48fa30ef6e2445569813b0250c882f9a<TInputBuffer> : LibToFuzz.Downstream where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_48fa30ef6e2445569813b0250c882f9a(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Boolean __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_91a861f81f9847f9b45e39c69f728a9d(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldSkip
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_91a861f81f9847f9b45e39c69f728a9d(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldInit
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_91a861f81f9847f9b45e39c69f728a9d(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean GotUpstream
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_c836daf771ab4adb8e18177e2c9409fd(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 Depth
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_e61b110f9ac042289d5b14a18d97ed99(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private LibToFuzz.FSeed __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static LibToFuzz.FSeed __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(LibToFuzz.FSeed);
                        }
                        else
                        {
                            return Read_173fadb92ca34782bbf2ea7a14b6bbbe(buffer, absoluteLocation);
                        }
                    }
                }

                public override LibToFuzz.FSeed Seed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_fd7302ef481541d9a4619258513935a3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Downstream value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(28, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[16];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.ShouldSkip;
                    var index0Offset = 0;
                    if (index0Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 1;

                    }

                    var index1Value = value.ShouldInit;
                    var index1Offset = 0;
                    if (index1Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 1;

                    }

                    var index2Value = value.GotUpstream;
                    var index2Offset = 0;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 1;

                    }

                    var index3Value = value.Depth;
                    var index3Offset = 0;
                    if (index3Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.Meta;
                    var index4Offset = 0;
                    if (index4Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.Seed;
                    var index5Offset = 0;
                    if (index5Value != default(LibToFuzz.FSeed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 28 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_91a861f81f9847f9b45e39c69f728a9d(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_91a861f81f9847f9b45e39c69f728a9d(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_91a861f81f9847f9b45e39c69f728a9d(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_c836daf771ab4adb8e18177e2c9409fd(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_e61b110f9ac042289d5b14a18d97ed99(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_173fadb92ca34782bbf2ea7a14b6bbbe(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_91a861f81f9847f9b45e39c69f728a9d(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_91a861f81f9847f9b45e39c69f728a9d<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_91a861f81f9847f9b45e39c69f728a9d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_c836daf771ab4adb8e18177e2c9409fd(System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 Read_c836daf771ab4adb8e18177e2c9409fd<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_c836daf771ab4adb8e18177e2c9409fd<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_e61b110f9ac042289d5b14a18d97ed99(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_430a6bbb833844a3abe76698d1f57c53(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_e61b110f9ac042289d5b14a18d97ed99<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_27fc7a2e1afb4dc380af2230fa6a01ed<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_27fc7a2e1afb4dc380af2230fa6a01ed<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_27fc7a2e1afb4dc380af2230fa6a01ed(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_430a6bbb833844a3abe76698d1f57c53(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_e61b110f9ac042289d5b14a18d97ed99<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_430a6bbb833844a3abe76698d1f57c53(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_430a6bbb833844a3abe76698d1f57c53(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_2031e14cfc7b44268888fb198ce3b200(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_430a6bbb833844a3abe76698d1f57c53<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_c9afebf0d6114fc0a2755768cd6d8fde<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_c9afebf0d6114fc0a2755768cd6d8fde<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_c9afebf0d6114fc0a2755768cd6d8fde(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_2031e14cfc7b44268888fb198ce3b200(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_430a6bbb833844a3abe76698d1f57c53<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_2031e14cfc7b44268888fb198ce3b200(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_252415cc781447ea8c513720e9797b4e<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_252415cc781447ea8c513720e9797b4e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_2031e14cfc7b44268888fb198ce3b200(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_2031e14cfc7b44268888fb198ce3b200<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_447eecf3c6ce46c8b7cf4a518252722b<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_447eecf3c6ce46c8b7cf4a518252722b<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_447eecf3c6ce46c8b7cf4a518252722b(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_252415cc781447ea8c513720e9797b4e(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_2031e14cfc7b44268888fb198ce3b200<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_173fadb92ca34782bbf2ea7a14b6bbbe(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_b914783cf895477eaa4f30d1cafc530e(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_e61b110f9ac042289d5b14a18d97ed99(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_a0deb917756f4a4c839d2b71fcb069c6(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_173fadb92ca34782bbf2ea7a14b6bbbe<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_a8cca503fa8a4344ab97131b3921b871<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a8cca503fa8a4344ab97131b3921b871<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_a8cca503fa8a4344ab97131b3921b871(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_b914783cf895477eaa4f30d1cafc530e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_e61b110f9ac042289d5b14a18d97ed99(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_a0deb917756f4a4c839d2b71fcb069c6(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_173fadb92ca34782bbf2ea7a14b6bbbe<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_b914783cf895477eaa4f30d1cafc530e(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_e61b110f9ac042289d5b14a18d97ed99(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_a0deb917756f4a4c839d2b71fcb069c6(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_b914783cf895477eaa4f30d1cafc530e(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_11f69c6fb9a549b3b64f8f68cb03518f(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_b914783cf895477eaa4f30d1cafc530e<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_ba2fc5208d9649d686ed16a619faf495<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_ba2fc5208d9649d686ed16a619faf495<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_ba2fc5208d9649d686ed16a619faf495(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_11f69c6fb9a549b3b64f8f68cb03518f(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_b914783cf895477eaa4f30d1cafc530e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_11f69c6fb9a549b3b64f8f68cb03518f(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_11f69c6fb9a549b3b64f8f68cb03518f(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_e61b110f9ac042289d5b14a18d97ed99(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_b914783cf895477eaa4f30d1cafc530e(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_252415cc781447ea8c513720e9797b4e(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_11f69c6fb9a549b3b64f8f68cb03518f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_6a8903a1f6344e81af3852effd24922b<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_6a8903a1f6344e81af3852effd24922b<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_6a8903a1f6344e81af3852effd24922b(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_e61b110f9ac042289d5b14a18d97ed99(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_b914783cf895477eaa4f30d1cafc530e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_91a861f81f9847f9b45e39c69f728a9d(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_252415cc781447ea8c513720e9797b4e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_11f69c6fb9a549b3b64f8f68cb03518f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_e61b110f9ac042289d5b14a18d97ed99(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_b914783cf895477eaa4f30d1cafc530e(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_91a861f81f9847f9b45e39c69f728a9d(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_252415cc781447ea8c513720e9797b4e(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_a0deb917756f4a4c839d2b71fcb069c6(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_a0deb917756f4a4c839d2b71fcb069c6<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_eebdac7a42ec41768168e0a3f30de6c2<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_eebdac7a42ec41768168e0a3f30de6c2<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_eebdac7a42ec41768168e0a3f30de6c2(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_665bd909e81d48d5a8f64450b39fe40c(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_a0deb917756f4a4c839d2b71fcb069c6<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_665bd909e81d48d5a8f64450b39fe40c(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_665bd909e81d48d5a8f64450b39fe40c(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_665bd909e81d48d5a8f64450b39fe40c<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_665bd909e81d48d5a8f64450b39fe40c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Upstream : object
    {
        partial void OnInitialized();
        public Upstream()
        {
            checked
            { this.OnInitialized(); }
        }

        public Upstream(Upstream source)
        {
            checked
            {
                this.Crashed = source.Crashed;
                this.HasFailed = source.HasFailed;
                this.MustDiscard = source.MustDiscard;
                this.MustSave = source.MustSave;
                this.ShouldSkip = source.ShouldSkip;
                this.SFZError = source.SFZError;
                this.ResultMessage = source.ResultMessage;
                this.Depth = source.Depth;
                this.MinElements = source.MinElements;
                this.MaxElements = source.MaxElements;
                this.MaxBufferLen = source.MaxBufferLen;
                this.SensorTranslation = source.SensorTranslation;
                this.Timeout = source.Timeout;
                this.InitError = source.InitError;
                this.Structure = source.Structure != null ? new LibToFuzz.FSeed(source.Structure) : null;
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.FromList = source.FromList?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Seeds = source.Seeds?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Tokens = source.Tokens?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.ReturnData = source.ReturnData?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.CFGenerator = source.CFGenerator?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.Boolean Crashed { get; set; }
        [FlatBufferItem(1)]
        public virtual System.Boolean HasFailed { get; set; }
        [FlatBufferItem(2)]
        public virtual System.Boolean MustDiscard { get; set; }
        [FlatBufferItem(3)]
        public virtual System.Boolean MustSave { get; set; }
        [FlatBufferItem(4)]
        public virtual System.Boolean ShouldSkip { get; set; }
        [FlatBufferItem(5)]
        public virtual System.UInt32 SFZError { get; set; }
        [FlatBufferItem(6)]
        public virtual System.String ResultMessage { get; set; }
        [FlatBufferItem(7)]
        public virtual System.UInt32 Depth { get; set; }
        [FlatBufferItem(8)]
        public virtual System.Int32 MinElements { get; set; }
        [FlatBufferItem(9)]
        public virtual System.Int32 MaxElements { get; set; }
        [FlatBufferItem(10)]
        public virtual System.Int32 MaxBufferLen { get; set; }
        [FlatBufferItem(11)]
        public virtual System.Int32 SensorTranslation { get; set; }
        [FlatBufferItem(12)]
        public virtual System.UInt64 Timeout { get; set; }
        [FlatBufferItem(13)]
        public virtual System.String InitError { get; set; }
        [FlatBufferItem(14)]
        public virtual global::LibToFuzz.FSeed Structure { get; set; }
        [FlatBufferItem(15)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Meta { get; set; }
        [FlatBufferItem(16)]
        public virtual IList<global::LibToFuzz.ConfigEntry> FromList { get; set; }
        [FlatBufferItem(17)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Seeds { get; set; }
        [FlatBufferItem(18)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Tokens { get; set; }
        [FlatBufferItem(19)]
        public virtual IList<global::LibToFuzz.Attribute> ReturnData { get; set; }
        [FlatBufferItem(20)]
        public virtual IList<global::LibToFuzz.Attribute> CFGenerator { get; set; }
        public static ISerializer<LibToFuzz.Upstream> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Upstream

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Upstream>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Upstream root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_b2fdee10815e4cc79d95ec9f4119bf6f(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Upstream root)
            {
                checked
                {
                    return GetMaxSizeOf_b2fdee10815e4cc79d95ec9f4119bf6f(root);
                }
            }

            public LibToFuzz.Upstream Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_b2fdee10815e4cc79d95ec9f4119bf6f(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_b2fdee10815e4cc79d95ec9f4119bf6f(LibToFuzz.Upstream value)
            {
                checked
                {

                    int runningSum = 132 + 47;
                    var index6Value = value.ResultMessage;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index6Value);
                    }
                    var index13Value = value.InitError;

                    if (!object.ReferenceEquals(index13Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index13Value);
                    }
                    var index14Value = value.Structure;

                    if (index14Value != null)
                    {
                        runningSum += GetMaxSizeOf_f2717e7487944b5ebd0049240c98f6ca(index14Value);
                    }
                    var index15Value = value.Meta;

                    if (!object.ReferenceEquals(index15Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index15Value);
                    }
                    var index16Value = value.FromList;

                    if (!object.ReferenceEquals(index16Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index16Value);
                    }
                    var index17Value = value.Seeds;

                    if (!object.ReferenceEquals(index17Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index17Value);
                    }
                    var index18Value = value.Tokens;

                    if (!object.ReferenceEquals(index18Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index18Value);
                    }
                    var index19Value = value.ReturnData;

                    if (!object.ReferenceEquals(index19Value, null))
                    {
                        runningSum += GetMaxSizeOf_ca5d407f149b41dba4177024cc297992(index19Value);
                    }
                    var index20Value = value.CFGenerator;

                    if (!object.ReferenceEquals(index20Value, null))
                    {
                        runningSum += GetMaxSizeOf_ca5d407f149b41dba4177024cc297992(index20Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Upstream Read_b2fdee10815e4cc79d95ec9f4119bf6f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_7206bc4c93004e2d8232ff6a46de90b9<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_7206bc4c93004e2d8232ff6a46de90b9<TInputBuffer> : LibToFuzz.Upstream where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_7206bc4c93004e2d8232ff6a46de90b9(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Boolean __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Crashed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean HasFailed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean MustDiscard
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean MustSave
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldSkip
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_4ca388e4556945749f2fe2dc17652c91(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 SFZError
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String ResultMessage
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_4ca388e4556945749f2fe2dc17652c91(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 Depth
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_78176fde4daf4f6da0722454b269a8f9(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MinElements
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_78176fde4daf4f6da0722454b269a8f9(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MaxElements
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index10;
                private bool __hasIndex10;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex10Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 10);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_78176fde4daf4f6da0722454b269a8f9(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MaxBufferLen
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex10)
                            {
                                this.__index10 = __ReadIndex10Value(this.buffer, this.offset);
                                this.__hasIndex10 = true;
                            }
                            return this.__index10;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index11;
                private bool __hasIndex11;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex11Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 11);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_78176fde4daf4f6da0722454b269a8f9(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 SensorTranslation
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex11)
                            {
                                this.__index11 = __ReadIndex11Value(this.buffer, this.offset);
                                this.__hasIndex11 = true;
                            }
                            return this.__index11;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt64 __index12;
                private bool __hasIndex12;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 __ReadIndex12Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 12);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt64);
                        }
                        else
                        {
                            return Read_587aeca63e1c4bcb9beab293c1911a27(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt64 Timeout
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex12)
                            {
                                this.__index12 = __ReadIndex12Value(this.buffer, this.offset);
                                this.__hasIndex12 = true;
                            }
                            return this.__index12;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index13;
                private bool __hasIndex13;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex13Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 13);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String InitError
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex13)
                            {
                                this.__index13 = __ReadIndex13Value(this.buffer, this.offset);
                                this.__hasIndex13 = true;
                            }
                            return this.__index13;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private LibToFuzz.FSeed __index14;
                private bool __hasIndex14;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static LibToFuzz.FSeed __ReadIndex14Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 14);
                        if (absoluteLocation == 0)
                        {
                            return default(LibToFuzz.FSeed);
                        }
                        else
                        {
                            return Read_f2717e7487944b5ebd0049240c98f6ca(buffer, absoluteLocation);
                        }
                    }
                }

                public override LibToFuzz.FSeed Structure
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex14)
                            {
                                this.__index14 = __ReadIndex14Value(this.buffer, this.offset);
                                this.__hasIndex14 = true;
                            }
                            return this.__index14;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index15;
                private bool __hasIndex15;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex15Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 15);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex15)
                            {
                                this.__index15 = __ReadIndex15Value(this.buffer, this.offset);
                                this.__hasIndex15 = true;
                            }
                            return this.__index15;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index16;
                private bool __hasIndex16;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex16Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 16);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> FromList
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex16)
                            {
                                this.__index16 = __ReadIndex16Value(this.buffer, this.offset);
                                this.__hasIndex16 = true;
                            }
                            return this.__index16;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index17;
                private bool __hasIndex17;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex17Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 17);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Seeds
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex17)
                            {
                                this.__index17 = __ReadIndex17Value(this.buffer, this.offset);
                                this.__hasIndex17 = true;
                            }
                            return this.__index17;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index18;
                private bool __hasIndex18;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex18Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 18);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Tokens
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex18)
                            {
                                this.__index18 = __ReadIndex18Value(this.buffer, this.offset);
                                this.__hasIndex18 = true;
                            }
                            return this.__index18;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index19;
                private bool __hasIndex19;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex19Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 19);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_ca5d407f149b41dba4177024cc297992(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> ReturnData
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex19)
                            {
                                this.__index19 = __ReadIndex19Value(this.buffer, this.offset);
                                this.__hasIndex19 = true;
                            }
                            return this.__index19;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index20;
                private bool __hasIndex20;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex20Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 20);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_ca5d407f149b41dba4177024cc297992(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> CFGenerator
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex20)
                            {
                                this.__index20 = __ReadIndex20Value(this.buffer, this.offset);
                                this.__hasIndex20 = true;
                            }
                            return this.__index20;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_b2fdee10815e4cc79d95ec9f4119bf6f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Upstream value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(129, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[46];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Crashed;
                    var index0Offset = 0;
                    if (index0Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 1;

                    }

                    var index1Value = value.HasFailed;
                    var index1Offset = 0;
                    if (index1Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 1;

                    }

                    var index2Value = value.MustDiscard;
                    var index2Offset = 0;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 1;

                    }

                    var index3Value = value.MustSave;
                    var index3Offset = 0;
                    if (index3Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 1;

                    }

                    var index4Value = value.ShouldSkip;
                    var index4Offset = 0;
                    if (index4Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 1;

                    }

                    var index5Value = value.SFZError;
                    var index5Offset = 0;
                    if (index5Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.ResultMessage;
                    var index6Offset = 0;
                    if (index6Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Depth;
                    var index7Offset = 0;
                    if (index7Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.MinElements;
                    var index8Offset = 0;
                    if (index8Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 4;

                    }

                    var index9Value = value.MaxElements;
                    var index9Offset = 0;
                    if (index9Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }

                    var index10Value = value.MaxBufferLen;
                    var index10Offset = 0;
                    if (index10Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index10Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 24, context);
                        maxVtableIndex = 10;
                        currentOffset += 4;

                    }

                    var index11Value = value.SensorTranslation;
                    var index11Offset = 0;
                    if (index11Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index11Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 26, context);
                        maxVtableIndex = 11;
                        currentOffset += 4;

                    }

                    var index12Value = value.Timeout;
                    var index12Offset = 0;
                    if (index12Value != default(System.UInt64))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index12Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 28, context);
                        maxVtableIndex = 12;
                        currentOffset += 8;

                    }

                    var index13Value = value.InitError;
                    var index13Offset = 0;
                    if (index13Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index13Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 30, context);
                        maxVtableIndex = 13;
                        currentOffset += 4;

                    }

                    var index14Value = value.Structure;
                    var index14Offset = 0;
                    if (index14Value != default(LibToFuzz.FSeed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index14Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 32, context);
                        maxVtableIndex = 14;
                        currentOffset += 4;

                    }

                    var index15Value = value.Meta;
                    var index15Offset = 0;
                    if (index15Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index15Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 34, context);
                        maxVtableIndex = 15;
                        currentOffset += 4;

                    }

                    var index16Value = value.FromList;
                    var index16Offset = 0;
                    if (index16Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index16Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 36, context);
                        maxVtableIndex = 16;
                        currentOffset += 4;

                    }

                    var index17Value = value.Seeds;
                    var index17Offset = 0;
                    if (index17Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index17Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 38, context);
                        maxVtableIndex = 17;
                        currentOffset += 4;

                    }

                    var index18Value = value.Tokens;
                    var index18Offset = 0;
                    if (index18Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index18Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 40, context);
                        maxVtableIndex = 18;
                        currentOffset += 4;

                    }

                    var index19Value = value.ReturnData;
                    var index19Offset = 0;
                    if (index19Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index19Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 42, context);
                        maxVtableIndex = 19;
                        currentOffset += 4;

                    }

                    var index20Value = value.CFGenerator;
                    var index20Offset = 0;
                    if (index20Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index20Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 44, context);
                        maxVtableIndex = 20;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 129 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_4ca388e4556945749f2fe2dc17652c91(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_4ca388e4556945749f2fe2dc17652c91(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_78176fde4daf4f6da0722454b269a8f9(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_78176fde4daf4f6da0722454b269a8f9(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }

                    if (index10Offset != 0)
                    {
                        WriteInlineValueOf_78176fde4daf4f6da0722454b269a8f9(
                            spanWriter,
                            span,
                            index10Value,
                            index10Offset,
                            context);

                    }

                    if (index11Offset != 0)
                    {
                        WriteInlineValueOf_78176fde4daf4f6da0722454b269a8f9(
                            spanWriter,
                            span,
                            index11Value,
                            index11Offset,
                            context);

                    }

                    if (index12Offset != 0)
                    {
                        WriteInlineValueOf_587aeca63e1c4bcb9beab293c1911a27(
                            spanWriter,
                            span,
                            index12Value,
                            index12Offset,
                            context);

                    }

                    if (index13Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index13Value,
                            index13Offset,
                            context);

                    }

                    if (index14Offset != 0)
                    {
                        WriteInlineValueOf_f2717e7487944b5ebd0049240c98f6ca(
                            spanWriter,
                            span,
                            index14Value,
                            index14Offset,
                            context);

                    }

                    if (index15Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index15Value,
                            index15Offset,
                            context);

                    }

                    if (index16Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index16Value,
                            index16Offset,
                            context);

                    }

                    if (index17Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index17Value,
                            index17Offset,
                            context);

                    }

                    if (index18Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index18Value,
                            index18Offset,
                            context);

                    }

                    if (index19Offset != 0)
                    {
                        WriteInlineValueOf_ca5d407f149b41dba4177024cc297992(
                            spanWriter,
                            span,
                            index19Value,
                            index19Offset,
                            context);

                    }

                    if (index20Offset != 0)
                    {
                        WriteInlineValueOf_ca5d407f149b41dba4177024cc297992(
                            spanWriter,
                            span,
                            index20Value,
                            index20Offset,
                            context);

                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_3e64d2b56bb54118ba488dbba7e9c233(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_3e64d2b56bb54118ba488dbba7e9c233<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_4ca388e4556945749f2fe2dc17652c91(System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 Read_4ca388e4556945749f2fe2dc17652c91<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_4ca388e4556945749f2fe2dc17652c91<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_1fb885946ef748be82e66c5d09602893<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_1fb885946ef748be82e66c5d09602893<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_78176fde4daf4f6da0722454b269a8f9(System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Int32 Read_78176fde4daf4f6da0722454b269a8f9<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_78176fde4daf4f6da0722454b269a8f9<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Int32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_587aeca63e1c4bcb9beab293c1911a27(System.UInt64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt64 Read_587aeca63e1c4bcb9beab293c1911a27<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadULong(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_587aeca63e1c4bcb9beab293c1911a27<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt64 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteULong(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_f2717e7487944b5ebd0049240c98f6ca(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_ca5d407f149b41dba4177024cc297992(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_65b2e811fbed43578aef4d5d3315279f(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_f2717e7487944b5ebd0049240c98f6ca<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_a68afc7ab6f047cfb52214a738b97c7a<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a68afc7ab6f047cfb52214a738b97c7a<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_a68afc7ab6f047cfb52214a738b97c7a(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_ca5d407f149b41dba4177024cc297992(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_65b2e811fbed43578aef4d5d3315279f(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_f2717e7487944b5ebd0049240c98f6ca<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_ca5d407f149b41dba4177024cc297992(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_65b2e811fbed43578aef4d5d3315279f(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_bafe382173d14263b0c47dcd5235afad(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_294349a924ee48c897e0e4f0b13895df<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_7735962a8f21498290b8d0390cd995ab<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_7735962a8f21498290b8d0390cd995ab<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_7735962a8f21498290b8d0390cd995ab(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_bafe382173d14263b0c47dcd5235afad(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_bafe382173d14263b0c47dcd5235afad(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_bafe382173d14263b0c47dcd5235afad(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_ca5d407f149b41dba4177024cc297992(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_294349a924ee48c897e0e4f0b13895df(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_bafe382173d14263b0c47dcd5235afad<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_c2e3791e72c44010b9bd9fa268f24d9b<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_c2e3791e72c44010b9bd9fa268f24d9b<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_c2e3791e72c44010b9bd9fa268f24d9b(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_ca5d407f149b41dba4177024cc297992(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_294349a924ee48c897e0e4f0b13895df(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_3e64d2b56bb54118ba488dbba7e9c233(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_bafe382173d14263b0c47dcd5235afad<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_ca5d407f149b41dba4177024cc297992(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_294349a924ee48c897e0e4f0b13895df(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_3e64d2b56bb54118ba488dbba7e9c233(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_ca5d407f149b41dba4177024cc297992(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_c793a7a52174461fa009c59dd047928a(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_ca5d407f149b41dba4177024cc297992<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_997d58dde6c54929a6c7ac5a5e552570<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_997d58dde6c54929a6c7ac5a5e552570<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_997d58dde6c54929a6c7ac5a5e552570(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_c793a7a52174461fa009c59dd047928a(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_ca5d407f149b41dba4177024cc297992<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_c793a7a52174461fa009c59dd047928a(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_c793a7a52174461fa009c59dd047928a(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_67f9a4224bcb4c54a237019b8f705c3e(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_c793a7a52174461fa009c59dd047928a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_46e8f2b8392f4f33a75bcfc8a0c76c33<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_46e8f2b8392f4f33a75bcfc8a0c76c33<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_46e8f2b8392f4f33a75bcfc8a0c76c33(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_1fb885946ef748be82e66c5d09602893(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_67f9a4224bcb4c54a237019b8f705c3e(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_c793a7a52174461fa009c59dd047928a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_67f9a4224bcb4c54a237019b8f705c3e(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_67f9a4224bcb4c54a237019b8f705c3e(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_1fb885946ef748be82e66c5d09602893(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_67f9a4224bcb4c54a237019b8f705c3e<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_bf4228b1f2ec4c55bb5a137efca82ec5<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_bf4228b1f2ec4c55bb5a137efca82ec5<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_bf4228b1f2ec4c55bb5a137efca82ec5(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_1fb885946ef748be82e66c5d09602893(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_67f9a4224bcb4c54a237019b8f705c3e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_1fb885946ef748be82e66c5d09602893(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_65b2e811fbed43578aef4d5d3315279f(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_65b2e811fbed43578aef4d5d3315279f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_4fa0d3584d7347c6a215858b2b210483<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_4fa0d3584d7347c6a215858b2b210483<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_4fa0d3584d7347c6a215858b2b210483(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_b183e970c7b14ac0a7296bb718346276(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_65b2e811fbed43578aef4d5d3315279f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_b183e970c7b14ac0a7296bb718346276(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_b183e970c7b14ac0a7296bb718346276(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_b183e970c7b14ac0a7296bb718346276<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_b183e970c7b14ac0a7296bb718346276<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
}
