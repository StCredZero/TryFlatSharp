
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 4.0.1.Psw2dxmTpiGAUbo6WVZHeS2FdqD1G73pWY2/bjGTUOU=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
namespace LibToFuzz
{
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Attribute : object
    {
        partial void OnInitialized();
        public Attribute()
        {
            checked
            { this.OnInitialized(); }
        }

        public Attribute(Attribute source)
        {
            checked
            {
                this.Key = source.Key;
                this.Value = source.Value;
                this.Values = source.Values?.ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.String Key { get; set; }
        [FlatBufferItem(1)]
        public virtual System.String Value { get; set; }
        [FlatBufferItem(2)]
        public virtual IList<System.String> Values { get; set; }
        public static ISerializer<LibToFuzz.Attribute> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Attribute

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Attribute>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Attribute root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_dc9a9055bbf24b5dba28cb400cb89822(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Attribute root)
            {
                checked
                {
                    return GetMaxSizeOf_dc9a9055bbf24b5dba28cb400cb89822(root);
                }
            }

            public LibToFuzz.Attribute Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_dc9a9055bbf24b5dba28cb400cb89822(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_dc9a9055bbf24b5dba28cb400cb89822(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_bced9c5036ec4514a0fb3078cdb69cde(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_bced9c5036ec4514a0fb3078cdb69cde(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_f59778abc15f49aba744e2fa058fc4cb(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_dc9a9055bbf24b5dba28cb400cb89822<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_d328b7dc78184bf7b6a583cd2c19c70c<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_d328b7dc78184bf7b6a583cd2c19c70c<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_d328b7dc78184bf7b6a583cd2c19c70c(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_bced9c5036ec4514a0fb3078cdb69cde(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_bced9c5036ec4514a0fb3078cdb69cde(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_f59778abc15f49aba744e2fa058fc4cb(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_dc9a9055bbf24b5dba28cb400cb89822<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_bced9c5036ec4514a0fb3078cdb69cde(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_bced9c5036ec4514a0fb3078cdb69cde(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_f59778abc15f49aba744e2fa058fc4cb(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_bced9c5036ec4514a0fb3078cdb69cde(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_bced9c5036ec4514a0fb3078cdb69cde<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_bced9c5036ec4514a0fb3078cdb69cde<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_f59778abc15f49aba744e2fa058fc4cb(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_bced9c5036ec4514a0fb3078cdb69cde(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_f59778abc15f49aba744e2fa058fc4cb<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_9ee5e0d75ec44eda8c3821b5b29627c8<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_9ee5e0d75ec44eda8c3821b5b29627c8<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_9ee5e0d75ec44eda8c3821b5b29627c8(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_bced9c5036ec4514a0fb3078cdb69cde(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_f59778abc15f49aba744e2fa058fc4cb<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_bced9c5036ec4514a0fb3078cdb69cde(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ConfigEntry : object
    {
        partial void OnInitialized();
        public ConfigEntry()
        {
            checked
            { this.OnInitialized(); }
        }

        public ConfigEntry(ConfigEntry source)
        {
            checked
            {
                this.Tag = source.Tag;
                this.Type = source.Type;
                this.Value = source.Value;
                this.Attributes = source.Attributes?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.FieldName = source.FieldName;
                this.FullType = source.FullType;
                this.Children = source.Children?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Key = source.Key;
                this.Used = source.Used;
                this.Topic = source.Topic;
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.String Tag { get; set; }
        [FlatBufferItem(1)]
        public virtual System.String Type { get; set; }
        [FlatBufferItem(2)]
        public virtual System.String Value { get; set; }
        [FlatBufferItem(3)]
        public virtual IList<global::LibToFuzz.Attribute> Attributes { get; set; }
        [FlatBufferItem(4)]
        public virtual System.String FieldName { get; set; }
        [FlatBufferItem(5)]
        public virtual System.String FullType { get; set; }
        [FlatBufferItem(6)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Children { get; set; }
        [FlatBufferItem(7)]
        public virtual System.String Key { get; set; }
        [FlatBufferItem(8)]
        public virtual System.Boolean Used { get; set; }
        [FlatBufferItem(9)]
        public virtual System.String Topic { get; set; }
        public static ISerializer<LibToFuzz.ConfigEntry> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.ConfigEntry

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.ConfigEntry>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.ConfigEntry root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_3df2e02a1c354a6bb29de0ada48aa993(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.ConfigEntry root)
            {
                checked
                {
                    return GetMaxSizeOf_3df2e02a1c354a6bb29de0ada48aa993(root);
                }
            }

            public LibToFuzz.ConfigEntry Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_3df2e02a1c354a6bb29de0ada48aa993(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_3df2e02a1c354a6bb29de0ada48aa993(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_c2f874e283ae495ab9e165b0b22a1409(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_8ee37a52a7f2442ea5887a06e9ce80a3(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_3df2e02a1c354a6bb29de0ada48aa993<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_655c070cf9dd466199893872c7314f16<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_655c070cf9dd466199893872c7314f16<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_655c070cf9dd466199893872c7314f16(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_c2f874e283ae495ab9e165b0b22a1409(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_8ee37a52a7f2442ea5887a06e9ce80a3(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_984c4e0a84374563b86433210ebdc719(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_3df2e02a1c354a6bb29de0ada48aa993<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_c2f874e283ae495ab9e165b0b22a1409(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_8ee37a52a7f2442ea5887a06e9ce80a3(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_984c4e0a84374563b86433210ebdc719(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_d6245312668548d284cf72aaef7e9294<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_d6245312668548d284cf72aaef7e9294<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_c2f874e283ae495ab9e165b0b22a1409(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_0bd1c12171b94b66804733d5f543cf4c(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_c2f874e283ae495ab9e165b0b22a1409<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_084b13e4ee6b4dd7a06a6323a3726dc1<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_084b13e4ee6b4dd7a06a6323a3726dc1<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_084b13e4ee6b4dd7a06a6323a3726dc1(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_0bd1c12171b94b66804733d5f543cf4c(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_c2f874e283ae495ab9e165b0b22a1409<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_0bd1c12171b94b66804733d5f543cf4c(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_0bd1c12171b94b66804733d5f543cf4c(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_2e115a6c9521441cbee8791672e4effc(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_0bd1c12171b94b66804733d5f543cf4c<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_825be69c6d124780beb646eb086dcbfc<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_825be69c6d124780beb646eb086dcbfc<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_825be69c6d124780beb646eb086dcbfc(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_d6245312668548d284cf72aaef7e9294(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_2e115a6c9521441cbee8791672e4effc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_0bd1c12171b94b66804733d5f543cf4c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_2e115a6c9521441cbee8791672e4effc(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_2e115a6c9521441cbee8791672e4effc(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_d6245312668548d284cf72aaef7e9294(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_2e115a6c9521441cbee8791672e4effc<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_f1c403cd545b4350a58c5fd8f617e259<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_f1c403cd545b4350a58c5fd8f617e259<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_f1c403cd545b4350a58c5fd8f617e259(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_d6245312668548d284cf72aaef7e9294(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_2e115a6c9521441cbee8791672e4effc<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_d6245312668548d284cf72aaef7e9294(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_8ee37a52a7f2442ea5887a06e9ce80a3(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_3df2e02a1c354a6bb29de0ada48aa993(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_8ee37a52a7f2442ea5887a06e9ce80a3<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_4718532061fa431ab3e2bdc50778b66c<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_4718532061fa431ab3e2bdc50778b66c<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_4718532061fa431ab3e2bdc50778b66c(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_3df2e02a1c354a6bb29de0ada48aa993(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_8ee37a52a7f2442ea5887a06e9ce80a3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_3df2e02a1c354a6bb29de0ada48aa993(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_984c4e0a84374563b86433210ebdc719(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_984c4e0a84374563b86433210ebdc719<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_984c4e0a84374563b86433210ebdc719<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class FSeed : object
    {
        partial void OnInitialized();
        public FSeed()
        {
            checked
            { this.OnInitialized(); }
        }

        public FSeed(FSeed source)
        {
            checked
            {
                this.Data = source.Data?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.SensorBytes = source.SensorBytes?.ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Data { get; set; }
        [FlatBufferItem(1)]
        public virtual IList<global::LibToFuzz.Attribute> Meta { get; set; }
        [FlatBufferItem(2)]
        public virtual IList<System.Byte> SensorBytes { get; set; }
        public static ISerializer<LibToFuzz.FSeed> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.FSeed

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.FSeed>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.FSeed root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_306086c0083243eb8d9b1f3ca66db427(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.FSeed root)
            {
                checked
                {
                    return GetMaxSizeOf_306086c0083243eb8d9b1f3ca66db427(root);
                }
            }

            public LibToFuzz.FSeed Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_306086c0083243eb8d9b1f3ca66db427(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_306086c0083243eb8d9b1f3ca66db427(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_96c7d687f58f490abd9efeaf02a8b0ab(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_1d883651476f419e97464254a01ad0fe(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_6449684bc22148869a746484be065d53(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_306086c0083243eb8d9b1f3ca66db427<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_1fb7635d645b4faab7db3d087fee3528<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_1fb7635d645b4faab7db3d087fee3528<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_1fb7635d645b4faab7db3d087fee3528(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_96c7d687f58f490abd9efeaf02a8b0ab(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1d883651476f419e97464254a01ad0fe(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_6449684bc22148869a746484be065d53(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_306086c0083243eb8d9b1f3ca66db427<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_96c7d687f58f490abd9efeaf02a8b0ab(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_1d883651476f419e97464254a01ad0fe(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_6449684bc22148869a746484be065d53(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_96c7d687f58f490abd9efeaf02a8b0ab(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_c0f73dff467646ceb657ef11e22dd9a9(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_96c7d687f58f490abd9efeaf02a8b0ab<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_994459fa982d451b9658a0a3ed6a5a85<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_994459fa982d451b9658a0a3ed6a5a85<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_994459fa982d451b9658a0a3ed6a5a85(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_c0f73dff467646ceb657ef11e22dd9a9(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_96c7d687f58f490abd9efeaf02a8b0ab<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_c0f73dff467646ceb657ef11e22dd9a9(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_c0f73dff467646ceb657ef11e22dd9a9(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_1d883651476f419e97464254a01ad0fe(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_96c7d687f58f490abd9efeaf02a8b0ab(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_c0f73dff467646ceb657ef11e22dd9a9<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_be7f728434464445b4f587c17f4d2210<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_be7f728434464445b4f587c17f4d2210<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_be7f728434464445b4f587c17f4d2210(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1d883651476f419e97464254a01ad0fe(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_96c7d687f58f490abd9efeaf02a8b0ab(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_6c347519edfb4bb2938623fb6dce52a0(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_c0f73dff467646ceb657ef11e22dd9a9<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_1d883651476f419e97464254a01ad0fe(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_96c7d687f58f490abd9efeaf02a8b0ab(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_6c347519edfb4bb2938623fb6dce52a0(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_2308b1251032447994ae584219b31adc(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_2308b1251032447994ae584219b31adc<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_2308b1251032447994ae584219b31adc<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_1d883651476f419e97464254a01ad0fe(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_963818310e1242ceaaf9b55331b2768a(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_1d883651476f419e97464254a01ad0fe<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_785e68af37a84903a399c57fb27b6118<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_785e68af37a84903a399c57fb27b6118<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_785e68af37a84903a399c57fb27b6118(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_963818310e1242ceaaf9b55331b2768a(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_1d883651476f419e97464254a01ad0fe<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_963818310e1242ceaaf9b55331b2768a(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_963818310e1242ceaaf9b55331b2768a(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_614d5e3c23374b76ab116248e4002686(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_963818310e1242ceaaf9b55331b2768a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_c563d573800540269d806426bcac7ff8<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_c563d573800540269d806426bcac7ff8<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_c563d573800540269d806426bcac7ff8(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_2308b1251032447994ae584219b31adc(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_614d5e3c23374b76ab116248e4002686(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_963818310e1242ceaaf9b55331b2768a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_614d5e3c23374b76ab116248e4002686(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_614d5e3c23374b76ab116248e4002686(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_2308b1251032447994ae584219b31adc(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_614d5e3c23374b76ab116248e4002686<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_a6bb8a8c5a524ce6a1b1836fba356c45<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_a6bb8a8c5a524ce6a1b1836fba356c45<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_a6bb8a8c5a524ce6a1b1836fba356c45(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_2308b1251032447994ae584219b31adc(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_614d5e3c23374b76ab116248e4002686<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_2308b1251032447994ae584219b31adc(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_6c347519edfb4bb2938623fb6dce52a0(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_6c347519edfb4bb2938623fb6dce52a0<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_6c347519edfb4bb2938623fb6dce52a0<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_6449684bc22148869a746484be065d53(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_6449684bc22148869a746484be065d53<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_ab2fdd1ebdeb4bacba4f350047997171<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_ab2fdd1ebdeb4bacba4f350047997171<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_ab2fdd1ebdeb4bacba4f350047997171(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_818e43f0a8324cb2b00b80ae6a7309a2(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_6449684bc22148869a746484be065d53<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_818e43f0a8324cb2b00b80ae6a7309a2(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_818e43f0a8324cb2b00b80ae6a7309a2(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_818e43f0a8324cb2b00b80ae6a7309a2<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_818e43f0a8324cb2b00b80ae6a7309a2<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Downstream : object
    {
        partial void OnInitialized();
        public Downstream()
        {
            checked
            { this.OnInitialized(); }
        }

        public Downstream(Downstream source)
        {
            checked
            {
                this.ShouldSkip = source.ShouldSkip;
                this.ShouldInit = source.ShouldInit;
                this.GotUpstream = source.GotUpstream;
                this.Depth = source.Depth;
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.Seed = source.Seed != null ? new LibToFuzz.FSeed(source.Seed) : null;
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.Boolean ShouldSkip { get; set; }
        [FlatBufferItem(1)]
        public virtual System.Boolean ShouldInit { get; set; }
        [FlatBufferItem(2)]
        public virtual System.Boolean GotUpstream { get; set; }
        [FlatBufferItem(3)]
        public virtual System.UInt32 Depth { get; set; }
        [FlatBufferItem(4)]
        public virtual IList<global::LibToFuzz.Attribute> Meta { get; set; }
        [FlatBufferItem(5)]
        public virtual global::LibToFuzz.FSeed Seed { get; set; }
        public static ISerializer<LibToFuzz.Downstream> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Downstream

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Downstream>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Downstream root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_55ad9b2cfb0f40c598c3a145dfcbc4f7(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Downstream root)
            {
                checked
                {
                    return GetMaxSizeOf_55ad9b2cfb0f40c598c3a145dfcbc4f7(root);
                }
            }

            public LibToFuzz.Downstream Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_55ad9b2cfb0f40c598c3a145dfcbc4f7(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_55ad9b2cfb0f40c598c3a145dfcbc4f7(LibToFuzz.Downstream value)
            {
                checked
                {

                    int runningSum = 31 + 17;
                    var index4Value = value.Meta;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_57f0e01b488b426d8a65c5a6f267e1e2(index4Value);
                    }
                    var index5Value = value.Seed;

                    if (index5Value != null)
                    {
                        runningSum += GetMaxSizeOf_07181d0bc6bc4295908004d3ac8b327b(index5Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Downstream Read_55ad9b2cfb0f40c598c3a145dfcbc4f7<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_277ae556c04345689412ef3e97ab7d93<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_277ae556c04345689412ef3e97ab7d93<TInputBuffer> : LibToFuzz.Downstream where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_277ae556c04345689412ef3e97ab7d93(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Boolean __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_2095a383047d4893af41d9154be39a69(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldSkip
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_2095a383047d4893af41d9154be39a69(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldInit
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_2095a383047d4893af41d9154be39a69(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean GotUpstream
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_a71f2e90c65245baa679f5d30c78420b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 Depth
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_57f0e01b488b426d8a65c5a6f267e1e2(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private LibToFuzz.FSeed __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static LibToFuzz.FSeed __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(LibToFuzz.FSeed);
                        }
                        else
                        {
                            return Read_07181d0bc6bc4295908004d3ac8b327b(buffer, absoluteLocation);
                        }
                    }
                }

                public override LibToFuzz.FSeed Seed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_55ad9b2cfb0f40c598c3a145dfcbc4f7<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Downstream value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(28, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[16];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.ShouldSkip;
                    var index0Offset = 0;
                    if (index0Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 1;

                    }

                    var index1Value = value.ShouldInit;
                    var index1Offset = 0;
                    if (index1Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 1;

                    }

                    var index2Value = value.GotUpstream;
                    var index2Offset = 0;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 1;

                    }

                    var index3Value = value.Depth;
                    var index3Offset = 0;
                    if (index3Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.Meta;
                    var index4Offset = 0;
                    if (index4Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.Seed;
                    var index5Offset = 0;
                    if (index5Value != default(LibToFuzz.FSeed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 28 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_2095a383047d4893af41d9154be39a69(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_2095a383047d4893af41d9154be39a69(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_2095a383047d4893af41d9154be39a69(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_a71f2e90c65245baa679f5d30c78420b(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_57f0e01b488b426d8a65c5a6f267e1e2(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_07181d0bc6bc4295908004d3ac8b327b(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_2095a383047d4893af41d9154be39a69(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_2095a383047d4893af41d9154be39a69<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_2095a383047d4893af41d9154be39a69<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_a71f2e90c65245baa679f5d30c78420b(System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 Read_a71f2e90c65245baa679f5d30c78420b<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_a71f2e90c65245baa679f5d30c78420b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_57f0e01b488b426d8a65c5a6f267e1e2(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_72ff26ef0608416fa21513d4ae141d45(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_57f0e01b488b426d8a65c5a6f267e1e2<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_7d2777071c6e461e8623681a01380ad7<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_7d2777071c6e461e8623681a01380ad7<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_7d2777071c6e461e8623681a01380ad7(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_72ff26ef0608416fa21513d4ae141d45(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_57f0e01b488b426d8a65c5a6f267e1e2<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_72ff26ef0608416fa21513d4ae141d45(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_72ff26ef0608416fa21513d4ae141d45(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_7f636fdb3b2b4a93911a89d22772db6a(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_72ff26ef0608416fa21513d4ae141d45<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_c473f68efc3d4bf1bceb2c88fa606662<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_c473f68efc3d4bf1bceb2c88fa606662<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_c473f68efc3d4bf1bceb2c88fa606662(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_7f636fdb3b2b4a93911a89d22772db6a(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_72ff26ef0608416fa21513d4ae141d45<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_7f636fdb3b2b4a93911a89d22772db6a(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_04db61d2a0b2418389664a1a76745441<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_04db61d2a0b2418389664a1a76745441<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_7f636fdb3b2b4a93911a89d22772db6a(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_7f636fdb3b2b4a93911a89d22772db6a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_f99f8755fa4445f59b29346c325eca31<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_f99f8755fa4445f59b29346c325eca31<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_f99f8755fa4445f59b29346c325eca31(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_04db61d2a0b2418389664a1a76745441(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_7f636fdb3b2b4a93911a89d22772db6a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_07181d0bc6bc4295908004d3ac8b327b(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_077ab3b9004a45e8a1e318c00a3732f1(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_57f0e01b488b426d8a65c5a6f267e1e2(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_e7d2e04ff1d54389844e59794087adb4(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_07181d0bc6bc4295908004d3ac8b327b<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_f0349fab43ab401baa09027c16ff79dd<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_f0349fab43ab401baa09027c16ff79dd<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_f0349fab43ab401baa09027c16ff79dd(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_077ab3b9004a45e8a1e318c00a3732f1(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_57f0e01b488b426d8a65c5a6f267e1e2(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_e7d2e04ff1d54389844e59794087adb4(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_07181d0bc6bc4295908004d3ac8b327b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_077ab3b9004a45e8a1e318c00a3732f1(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_57f0e01b488b426d8a65c5a6f267e1e2(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_e7d2e04ff1d54389844e59794087adb4(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_077ab3b9004a45e8a1e318c00a3732f1(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_1c1ba00143074a7fa9c38e9a1a13b06f(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_077ab3b9004a45e8a1e318c00a3732f1<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_9f11f641233c41ed85d0f83bb389a5bf<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_9f11f641233c41ed85d0f83bb389a5bf<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_9f11f641233c41ed85d0f83bb389a5bf(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_1c1ba00143074a7fa9c38e9a1a13b06f(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_077ab3b9004a45e8a1e318c00a3732f1<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_1c1ba00143074a7fa9c38e9a1a13b06f(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_1c1ba00143074a7fa9c38e9a1a13b06f(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_57f0e01b488b426d8a65c5a6f267e1e2(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_077ab3b9004a45e8a1e318c00a3732f1(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_04db61d2a0b2418389664a1a76745441(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_1c1ba00143074a7fa9c38e9a1a13b06f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_71bc55d2328a430896adb8813d3136e6<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_71bc55d2328a430896adb8813d3136e6<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_71bc55d2328a430896adb8813d3136e6(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_57f0e01b488b426d8a65c5a6f267e1e2(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_077ab3b9004a45e8a1e318c00a3732f1(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_2095a383047d4893af41d9154be39a69(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_04db61d2a0b2418389664a1a76745441(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_1c1ba00143074a7fa9c38e9a1a13b06f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_57f0e01b488b426d8a65c5a6f267e1e2(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_077ab3b9004a45e8a1e318c00a3732f1(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_2095a383047d4893af41d9154be39a69(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_04db61d2a0b2418389664a1a76745441(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_e7d2e04ff1d54389844e59794087adb4(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_e7d2e04ff1d54389844e59794087adb4<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_b0aa2b3731ed47e8be7c822239b2173c<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_b0aa2b3731ed47e8be7c822239b2173c<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_b0aa2b3731ed47e8be7c822239b2173c(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_a2e07121489844e7b59269567e2b856a(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_e7d2e04ff1d54389844e59794087adb4<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_a2e07121489844e7b59269567e2b856a(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_a2e07121489844e7b59269567e2b856a(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_a2e07121489844e7b59269567e2b856a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_a2e07121489844e7b59269567e2b856a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTable]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Upstream : object
    {
        partial void OnInitialized();
        public Upstream()
        {
            checked
            { this.OnInitialized(); }
        }

        public Upstream(Upstream source)
        {
            checked
            {
                this.Crashed = source.Crashed;
                this.HasFailed = source.HasFailed;
                this.MustDiscard = source.MustDiscard;
                this.MustSave = source.MustSave;
                this.ShouldSkip = source.ShouldSkip;
                this.SFZError = source.SFZError;
                this.ResultMessage = source.ResultMessage;
                this.Depth = source.Depth;
                this.MinElements = source.MinElements;
                this.MaxElements = source.MaxElements;
                this.MaxBufferLen = source.MaxBufferLen;
                this.SensorTranslation = source.SensorTranslation;
                this.Timeout = source.Timeout;
                this.InitError = source.InitError;
                this.Structure = source.Structure != null ? new LibToFuzz.FSeed(source.Structure) : null;
                this.Meta = source.Meta?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.FromList = source.FromList?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Seeds = source.Seeds?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.Tokens = source.Tokens?.Select(x => x != null ? new LibToFuzz.ConfigEntry(x) : null).ToList();
                this.ReturnData = source.ReturnData?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.CFGenerator = source.CFGenerator?.Select(x => x != null ? new LibToFuzz.Attribute(x) : null).ToList();
                this.OnInitialized();
            }
        }

        [FlatBufferItem(0)]
        public virtual System.Boolean Crashed { get; set; }
        [FlatBufferItem(1)]
        public virtual System.Boolean HasFailed { get; set; }
        [FlatBufferItem(2)]
        public virtual System.Boolean MustDiscard { get; set; }
        [FlatBufferItem(3)]
        public virtual System.Boolean MustSave { get; set; }
        [FlatBufferItem(4)]
        public virtual System.Boolean ShouldSkip { get; set; }
        [FlatBufferItem(5)]
        public virtual System.UInt32 SFZError { get; set; }
        [FlatBufferItem(6)]
        public virtual System.String ResultMessage { get; set; }
        [FlatBufferItem(7)]
        public virtual System.UInt32 Depth { get; set; }
        [FlatBufferItem(8)]
        public virtual System.Int32 MinElements { get; set; }
        [FlatBufferItem(9)]
        public virtual System.Int32 MaxElements { get; set; }
        [FlatBufferItem(10)]
        public virtual System.Int32 MaxBufferLen { get; set; }
        [FlatBufferItem(11)]
        public virtual System.Int32 SensorTranslation { get; set; }
        [FlatBufferItem(12)]
        public virtual System.UInt64 Timeout { get; set; }
        [FlatBufferItem(13)]
        public virtual System.String InitError { get; set; }
        [FlatBufferItem(14)]
        public virtual global::LibToFuzz.FSeed Structure { get; set; }
        [FlatBufferItem(15)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Meta { get; set; }
        [FlatBufferItem(16)]
        public virtual IList<global::LibToFuzz.ConfigEntry> FromList { get; set; }
        [FlatBufferItem(17)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Seeds { get; set; }
        [FlatBufferItem(18)]
        public virtual IList<global::LibToFuzz.ConfigEntry> Tokens { get; set; }
        [FlatBufferItem(19)]
        public virtual IList<global::LibToFuzz.Attribute> ReturnData { get; set; }
        [FlatBufferItem(20)]
        public virtual IList<global::LibToFuzz.Attribute> CFGenerator { get; set; }
        public static ISerializer<LibToFuzz.Upstream> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        #region Serializer for LibToFuzz.Upstream

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<LibToFuzz.Upstream>
        {

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, LibToFuzz.Upstream root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_7d5e196766e64ff5be5f77ff304da79f(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(LibToFuzz.Upstream root)
            {
                checked
                {
                    return GetMaxSizeOf_7d5e196766e64ff5be5f77ff304da79f(root);
                }
            }

            public LibToFuzz.Upstream Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_7d5e196766e64ff5be5f77ff304da79f(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_7d5e196766e64ff5be5f77ff304da79f(LibToFuzz.Upstream value)
            {
                checked
                {

                    int runningSum = 132 + 47;
                    var index6Value = value.ResultMessage;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index6Value);
                    }
                    var index13Value = value.InitError;

                    if (!object.ReferenceEquals(index13Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index13Value);
                    }
                    var index14Value = value.Structure;

                    if (index14Value != null)
                    {
                        runningSum += GetMaxSizeOf_672371c13fa547acb6e21220fd1198bd(index14Value);
                    }
                    var index15Value = value.Meta;

                    if (!object.ReferenceEquals(index15Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index15Value);
                    }
                    var index16Value = value.FromList;

                    if (!object.ReferenceEquals(index16Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index16Value);
                    }
                    var index17Value = value.Seeds;

                    if (!object.ReferenceEquals(index17Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index17Value);
                    }
                    var index18Value = value.Tokens;

                    if (!object.ReferenceEquals(index18Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index18Value);
                    }
                    var index19Value = value.ReturnData;

                    if (!object.ReferenceEquals(index19Value, null))
                    {
                        runningSum += GetMaxSizeOf_1bae042aea9f45ce97849d5a84a73e88(index19Value);
                    }
                    var index20Value = value.CFGenerator;

                    if (!object.ReferenceEquals(index20Value, null))
                    {
                        runningSum += GetMaxSizeOf_1bae042aea9f45ce97849d5a84a73e88(index20Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Upstream Read_7d5e196766e64ff5be5f77ff304da79f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_f7fc01b3158941eabd9dbb89f0f314e5<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_f7fc01b3158941eabd9dbb89f0f314e5<TInputBuffer> : LibToFuzz.Upstream where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_f7fc01b3158941eabd9dbb89f0f314e5(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Boolean __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Crashed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean HasFailed
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean MustDiscard
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean MustSave
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean ShouldSkip
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_3b40121331774e148d82c6c95cc9af72(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 SFZError
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String ResultMessage
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt32 __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt32);
                        }
                        else
                        {
                            return Read_3b40121331774e148d82c6c95cc9af72(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt32 Depth
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_428d21df6e644f40851dc9060852d8f4(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MinElements
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_428d21df6e644f40851dc9060852d8f4(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MaxElements
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index10;
                private bool __hasIndex10;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex10Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 10);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_428d21df6e644f40851dc9060852d8f4(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 MaxBufferLen
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex10)
                            {
                                this.__index10 = __ReadIndex10Value(this.buffer, this.offset);
                                this.__hasIndex10 = true;
                            }
                            return this.__index10;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Int32 __index11;
                private bool __hasIndex11;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 __ReadIndex11Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 11);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Int32);
                        }
                        else
                        {
                            return Read_428d21df6e644f40851dc9060852d8f4(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Int32 SensorTranslation
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex11)
                            {
                                this.__index11 = __ReadIndex11Value(this.buffer, this.offset);
                                this.__hasIndex11 = true;
                            }
                            return this.__index11;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.UInt64 __index12;
                private bool __hasIndex12;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 __ReadIndex12Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 12);
                        if (absoluteLocation == 0)
                        {
                            return default(System.UInt64);
                        }
                        else
                        {
                            return Read_a43f4964ad814c098c32e41f656de501(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.UInt64 Timeout
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex12)
                            {
                                this.__index12 = __ReadIndex12Value(this.buffer, this.offset);
                                this.__hasIndex12 = true;
                            }
                            return this.__index12;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index13;
                private bool __hasIndex13;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex13Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 13);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String InitError
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex13)
                            {
                                this.__index13 = __ReadIndex13Value(this.buffer, this.offset);
                                this.__hasIndex13 = true;
                            }
                            return this.__index13;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private LibToFuzz.FSeed __index14;
                private bool __hasIndex14;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static LibToFuzz.FSeed __ReadIndex14Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 14);
                        if (absoluteLocation == 0)
                        {
                            return default(LibToFuzz.FSeed);
                        }
                        else
                        {
                            return Read_672371c13fa547acb6e21220fd1198bd(buffer, absoluteLocation);
                        }
                    }
                }

                public override LibToFuzz.FSeed Structure
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex14)
                            {
                                this.__index14 = __ReadIndex14Value(this.buffer, this.offset);
                                this.__hasIndex14 = true;
                            }
                            return this.__index14;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index15;
                private bool __hasIndex15;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex15Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 15);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex15)
                            {
                                this.__index15 = __ReadIndex15Value(this.buffer, this.offset);
                                this.__hasIndex15 = true;
                            }
                            return this.__index15;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index16;
                private bool __hasIndex16;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex16Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 16);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> FromList
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex16)
                            {
                                this.__index16 = __ReadIndex16Value(this.buffer, this.offset);
                                this.__hasIndex16 = true;
                            }
                            return this.__index16;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index17;
                private bool __hasIndex17;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex17Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 17);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Seeds
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex17)
                            {
                                this.__index17 = __ReadIndex17Value(this.buffer, this.offset);
                                this.__hasIndex17 = true;
                            }
                            return this.__index17;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index18;
                private bool __hasIndex18;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex18Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 18);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Tokens
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex18)
                            {
                                this.__index18 = __ReadIndex18Value(this.buffer, this.offset);
                                this.__hasIndex18 = true;
                            }
                            return this.__index18;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index19;
                private bool __hasIndex19;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex19Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 19);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1bae042aea9f45ce97849d5a84a73e88(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> ReturnData
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex19)
                            {
                                this.__index19 = __ReadIndex19Value(this.buffer, this.offset);
                                this.__hasIndex19 = true;
                            }
                            return this.__index19;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index20;
                private bool __hasIndex20;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex20Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 20);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1bae042aea9f45ce97849d5a84a73e88(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> CFGenerator
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex20)
                            {
                                this.__index20 = __ReadIndex20Value(this.buffer, this.offset);
                                this.__hasIndex20 = true;
                            }
                            return this.__index20;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_7d5e196766e64ff5be5f77ff304da79f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Upstream value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(129, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[46];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Crashed;
                    var index0Offset = 0;
                    if (index0Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 1;

                    }

                    var index1Value = value.HasFailed;
                    var index1Offset = 0;
                    if (index1Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 1;

                    }

                    var index2Value = value.MustDiscard;
                    var index2Offset = 0;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 1;

                    }

                    var index3Value = value.MustSave;
                    var index3Offset = 0;
                    if (index3Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 1;

                    }

                    var index4Value = value.ShouldSkip;
                    var index4Offset = 0;
                    if (index4Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 1;

                    }

                    var index5Value = value.SFZError;
                    var index5Offset = 0;
                    if (index5Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.ResultMessage;
                    var index6Offset = 0;
                    if (index6Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Depth;
                    var index7Offset = 0;
                    if (index7Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.MinElements;
                    var index8Offset = 0;
                    if (index8Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 4;

                    }

                    var index9Value = value.MaxElements;
                    var index9Offset = 0;
                    if (index9Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }

                    var index10Value = value.MaxBufferLen;
                    var index10Offset = 0;
                    if (index10Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index10Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 24, context);
                        maxVtableIndex = 10;
                        currentOffset += 4;

                    }

                    var index11Value = value.SensorTranslation;
                    var index11Offset = 0;
                    if (index11Value != default(System.Int32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index11Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 26, context);
                        maxVtableIndex = 11;
                        currentOffset += 4;

                    }

                    var index12Value = value.Timeout;
                    var index12Offset = 0;
                    if (index12Value != default(System.UInt64))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index12Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 28, context);
                        maxVtableIndex = 12;
                        currentOffset += 8;

                    }

                    var index13Value = value.InitError;
                    var index13Offset = 0;
                    if (index13Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index13Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 30, context);
                        maxVtableIndex = 13;
                        currentOffset += 4;

                    }

                    var index14Value = value.Structure;
                    var index14Offset = 0;
                    if (index14Value != default(LibToFuzz.FSeed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index14Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 32, context);
                        maxVtableIndex = 14;
                        currentOffset += 4;

                    }

                    var index15Value = value.Meta;
                    var index15Offset = 0;
                    if (index15Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index15Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 34, context);
                        maxVtableIndex = 15;
                        currentOffset += 4;

                    }

                    var index16Value = value.FromList;
                    var index16Offset = 0;
                    if (index16Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index16Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 36, context);
                        maxVtableIndex = 16;
                        currentOffset += 4;

                    }

                    var index17Value = value.Seeds;
                    var index17Offset = 0;
                    if (index17Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index17Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 38, context);
                        maxVtableIndex = 17;
                        currentOffset += 4;

                    }

                    var index18Value = value.Tokens;
                    var index18Offset = 0;
                    if (index18Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index18Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 40, context);
                        maxVtableIndex = 18;
                        currentOffset += 4;

                    }

                    var index19Value = value.ReturnData;
                    var index19Offset = 0;
                    if (index19Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index19Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 42, context);
                        maxVtableIndex = 19;
                        currentOffset += 4;

                    }

                    var index20Value = value.CFGenerator;
                    var index20Offset = 0;
                    if (index20Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index20Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 44, context);
                        maxVtableIndex = 20;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 129 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_3b40121331774e148d82c6c95cc9af72(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_3b40121331774e148d82c6c95cc9af72(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_428d21df6e644f40851dc9060852d8f4(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_428d21df6e644f40851dc9060852d8f4(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }

                    if (index10Offset != 0)
                    {
                        WriteInlineValueOf_428d21df6e644f40851dc9060852d8f4(
                            spanWriter,
                            span,
                            index10Value,
                            index10Offset,
                            context);

                    }

                    if (index11Offset != 0)
                    {
                        WriteInlineValueOf_428d21df6e644f40851dc9060852d8f4(
                            spanWriter,
                            span,
                            index11Value,
                            index11Offset,
                            context);

                    }

                    if (index12Offset != 0)
                    {
                        WriteInlineValueOf_a43f4964ad814c098c32e41f656de501(
                            spanWriter,
                            span,
                            index12Value,
                            index12Offset,
                            context);

                    }

                    if (index13Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index13Value,
                            index13Offset,
                            context);

                    }

                    if (index14Offset != 0)
                    {
                        WriteInlineValueOf_672371c13fa547acb6e21220fd1198bd(
                            spanWriter,
                            span,
                            index14Value,
                            index14Offset,
                            context);

                    }

                    if (index15Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index15Value,
                            index15Offset,
                            context);

                    }

                    if (index16Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index16Value,
                            index16Offset,
                            context);

                    }

                    if (index17Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index17Value,
                            index17Offset,
                            context);

                    }

                    if (index18Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index18Value,
                            index18Offset,
                            context);

                    }

                    if (index19Offset != 0)
                    {
                        WriteInlineValueOf_1bae042aea9f45ce97849d5a84a73e88(
                            spanWriter,
                            span,
                            index19Value,
                            index19Offset,
                            context);

                    }

                    if (index20Offset != 0)
                    {
                        WriteInlineValueOf_1bae042aea9f45ce97849d5a84a73e88(
                            spanWriter,
                            span,
                            index20Value,
                            index20Offset,
                            context);

                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_b31a013773da489baafb147a0dac0d5b(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_b31a013773da489baafb147a0dac0d5b<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_3b40121331774e148d82c6c95cc9af72(System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 Read_3b40121331774e148d82c6c95cc9af72<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_3b40121331774e148d82c6c95cc9af72<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_4b87f6351f154a6b81d408b81dbc7771<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_428d21df6e644f40851dc9060852d8f4(System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Int32 Read_428d21df6e644f40851dc9060852d8f4<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_428d21df6e644f40851dc9060852d8f4<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Int32 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset, context);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_a43f4964ad814c098c32e41f656de501(System.UInt64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.UInt64 Read_a43f4964ad814c098c32e41f656de501<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadULong(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_a43f4964ad814c098c32e41f656de501<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.UInt64 value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteULong(span, value, offset, context);
                }
            }

            private static int GetMaxSizeOf_672371c13fa547acb6e21220fd1198bd(LibToFuzz.FSeed value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Data;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index0Value);
                    }
                    var index1Value = value.Meta;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_1bae042aea9f45ce97849d5a84a73e88(index1Value);
                    }
                    var index2Value = value.SensorBytes;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_719f1dd4426f4c4c88a86df475d80542(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.FSeed Read_672371c13fa547acb6e21220fd1198bd<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_a4179112e80a401fa1482c3d9bae8484<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a4179112e80a401fa1482c3d9bae8484<TInputBuffer> : LibToFuzz.FSeed where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_a4179112e80a401fa1482c3d9bae8484(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Data
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1bae042aea9f45ce97849d5a84a73e88(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Meta
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.Byte> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.Byte> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.Byte>);
                        }
                        else
                        {
                            return Read_719f1dd4426f4c4c88a86df475d80542(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.Byte> SensorBytes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_672371c13fa547acb6e21220fd1198bd<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.FSeed value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Data;
                    var index0Offset = 0;
                    if (index0Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Meta;
                    var index1Offset = 0;
                    if (index1Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.SensorBytes;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.Byte>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_1bae042aea9f45ce97849d5a84a73e88(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_719f1dd4426f4c4c88a86df475d80542(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_500a1befb7574afa802db449441ba4aa(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Read_4f8d859f5ddb4644a62f9b0b47aacc98<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_7756a584ae074187add6243de1cd7512<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_7756a584ae074187add6243de1cd7512<TInputBuffer> : FlatBufferVector<LibToFuzz.ConfigEntry, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_7756a584ae074187add6243de1cd7512(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.ConfigEntry ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_500a1befb7574afa802db449441ba4aa(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.ConfigEntry> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_500a1befb7574afa802db449441ba4aa(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_500a1befb7574afa802db449441ba4aa(LibToFuzz.ConfigEntry value)
            {
                checked
                {

                    int runningSum = 71 + 25;
                    var index0Value = value.Tag;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index0Value);
                    }
                    var index1Value = value.Type;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index1Value);
                    }
                    var index2Value = value.Value;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index2Value);
                    }
                    var index3Value = value.Attributes;

                    if (!object.ReferenceEquals(index3Value, null))
                    {
                        runningSum += GetMaxSizeOf_1bae042aea9f45ce97849d5a84a73e88(index3Value);
                    }
                    var index4Value = value.FieldName;

                    if (!object.ReferenceEquals(index4Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index4Value);
                    }
                    var index5Value = value.FullType;

                    if (!object.ReferenceEquals(index5Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index5Value);
                    }
                    var index6Value = value.Children;

                    if (!object.ReferenceEquals(index6Value, null))
                    {
                        runningSum += GetMaxSizeOf_4f8d859f5ddb4644a62f9b0b47aacc98(index6Value);
                    }
                    var index7Value = value.Key;

                    if (!object.ReferenceEquals(index7Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index7Value);
                    }
                    var index9Value = value.Topic;

                    if (!object.ReferenceEquals(index9Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index9Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.ConfigEntry Read_500a1befb7574afa802db449441ba4aa<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_5c0268b548b54515836bc652c88233ab<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_5c0268b548b54515836bc652c88233ab<TInputBuffer> : LibToFuzz.ConfigEntry where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_5c0268b548b54515836bc652c88233ab(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Tag
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Type
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.Attribute> __index3;
                private bool __hasIndex3;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.Attribute> __ReadIndex3Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.Attribute>);
                        }
                        else
                        {
                            return Read_1bae042aea9f45ce97849d5a84a73e88(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.Attribute> Attributes
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex3)
                            {
                                this.__index3 = __ReadIndex3Value(this.buffer, this.offset);
                                this.__hasIndex3 = true;
                            }
                            return this.__index3;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index4;
                private bool __hasIndex4;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex4Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 4);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FieldName
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex4)
                            {
                                this.__index4 = __ReadIndex4Value(this.buffer, this.offset);
                                this.__hasIndex4 = true;
                            }
                            return this.__index4;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index5;
                private bool __hasIndex5;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex5Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String FullType
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex5)
                            {
                                this.__index5 = __ReadIndex5Value(this.buffer, this.offset);
                                this.__hasIndex5 = true;
                            }
                            return this.__index5;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __index6;
                private bool __hasIndex6;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<LibToFuzz.ConfigEntry> __ReadIndex6Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>);
                        }
                        else
                        {
                            return Read_4f8d859f5ddb4644a62f9b0b47aacc98(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<LibToFuzz.ConfigEntry> Children
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex6)
                            {
                                this.__index6 = __ReadIndex6Value(this.buffer, this.offset);
                                this.__hasIndex6 = true;
                            }
                            return this.__index6;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index7;
                private bool __hasIndex7;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex7Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex7)
                            {
                                this.__index7 = __ReadIndex7Value(this.buffer, this.offset);
                                this.__hasIndex7 = true;
                            }
                            return this.__index7;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Boolean __index8;
                private bool __hasIndex8;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Boolean __ReadIndex8Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Boolean);
                        }
                        else
                        {
                            return Read_b31a013773da489baafb147a0dac0d5b(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Boolean Used
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex8)
                            {
                                this.__index8 = __ReadIndex8Value(this.buffer, this.offset);
                                this.__hasIndex8 = true;
                            }
                            return this.__index8;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index9;
                private bool __hasIndex9;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex9Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 9);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Topic
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex9)
                            {
                                this.__index9 = __ReadIndex9Value(this.buffer, this.offset);
                                this.__hasIndex9 = true;
                            }
                            return this.__index9;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_500a1befb7574afa802db449441ba4aa<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.ConfigEntry value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(68, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[24];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Tag;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Type;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Value;
                    var index2Offset = 0;
                    if (index2Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }

                    var index3Value = value.Attributes;
                    var index3Offset = 0;
                    if (index3Value != default(System.Collections.Generic.IList<LibToFuzz.Attribute>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                        maxVtableIndex = 3;
                        currentOffset += 4;

                    }

                    var index4Value = value.FieldName;
                    var index4Offset = 0;
                    if (index4Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 12, context);
                        maxVtableIndex = 4;
                        currentOffset += 4;

                    }

                    var index5Value = value.FullType;
                    var index5Offset = 0;
                    if (index5Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                        maxVtableIndex = 5;
                        currentOffset += 4;

                    }

                    var index6Value = value.Children;
                    var index6Offset = 0;
                    if (index6Value != default(System.Collections.Generic.IList<LibToFuzz.ConfigEntry>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index6Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                        maxVtableIndex = 6;
                        currentOffset += 4;

                    }

                    var index7Value = value.Key;
                    var index7Offset = 0;
                    if (index7Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                        maxVtableIndex = 7;
                        currentOffset += 4;

                    }

                    var index8Value = value.Used;
                    var index8Offset = 0;
                    if (index8Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index8Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                        maxVtableIndex = 8;
                        currentOffset += 1;

                    }

                    var index9Value = value.Topic;
                    var index9Offset = 0;
                    if (index9Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index9Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                        maxVtableIndex = 9;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 68 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }

                    if (index3Offset != 0)
                    {
                        WriteInlineValueOf_1bae042aea9f45ce97849d5a84a73e88(
                            spanWriter,
                            span,
                            index3Value,
                            index3Offset,
                            context);

                    }

                    if (index4Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index4Value,
                            index4Offset,
                            context);

                    }

                    if (index5Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index5Value,
                            index5Offset,
                            context);

                    }

                    if (index6Offset != 0)
                    {
                        WriteInlineValueOf_4f8d859f5ddb4644a62f9b0b47aacc98(
                            spanWriter,
                            span,
                            index6Value,
                            index6Offset,
                            context);

                    }

                    if (index7Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index7Value,
                            index7Offset,
                            context);

                    }

                    if (index8Offset != 0)
                    {
                        WriteInlineValueOf_b31a013773da489baafb147a0dac0d5b(
                            spanWriter,
                            span,
                            index8Value,
                            index8Offset,
                            context);

                    }

                    if (index9Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index9Value,
                            index9Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_1bae042aea9f45ce97849d5a84a73e88(System.Collections.Generic.IList<LibToFuzz.Attribute> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_10a1f5ab2bb147f5b674dbe72ebaf531(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<LibToFuzz.Attribute> Read_1bae042aea9f45ce97849d5a84a73e88<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_42b7a23f75e0480f91f50a39ab6dfdc7<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_42b7a23f75e0480f91f50a39ab6dfdc7<TInputBuffer> : FlatBufferVector<LibToFuzz.Attribute, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_42b7a23f75e0480f91f50a39ab6dfdc7(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override LibToFuzz.Attribute ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_10a1f5ab2bb147f5b674dbe72ebaf531(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_1bae042aea9f45ce97849d5a84a73e88<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<LibToFuzz.Attribute> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_10a1f5ab2bb147f5b674dbe72ebaf531(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_10a1f5ab2bb147f5b674dbe72ebaf531(LibToFuzz.Attribute value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.Key;

                    if (!object.ReferenceEquals(index0Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!object.ReferenceEquals(index1Value, null))
                    {
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(index1Value);
                    }
                    var index2Value = value.Values;

                    if (!object.ReferenceEquals(index2Value, null))
                    {
                        runningSum += GetMaxSizeOf_965cfa073f8141b6b2258edfef21a64f(index2Value);
                    };
                    return runningSum;

                }
            }

            private static LibToFuzz.Attribute Read_10a1f5ab2bb147f5b674dbe72ebaf531<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new tableReader_d66a9073402241cda15d1e3d62c2ceb8<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_d66a9073402241cda15d1e3d62c2ceb8<TInputBuffer> : LibToFuzz.Attribute where TInputBuffer : IInputBuffer
            {
                private readonly TInputBuffer buffer;
                private readonly int offset;

                public tableReader_d66a9073402241cda15d1e3d62c2ceb8(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        this.buffer = buffer;
                        this.offset = offset;

                    }
                }

                private System.String __index0;
                private bool __hasIndex0;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Key
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex0)
                            {
                                this.__index0 = __ReadIndex0Value(this.buffer, this.offset);
                                this.__hasIndex0 = true;
                            }
                            return this.__index0;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.String __index1;
                private bool __hasIndex1;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                        if (absoluteLocation == 0)
                        {
                            return default(System.String);
                        }
                        else
                        {
                            return Read_4b87f6351f154a6b81d408b81dbc7771(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.String Value
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex1)
                            {
                                this.__index1 = __ReadIndex1Value(this.buffer, this.offset);
                                this.__hasIndex1 = true;
                            }
                            return this.__index1;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
                private System.Collections.Generic.IList<System.String> __index2;
                private bool __hasIndex2;

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> __ReadIndex2Value(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                        if (absoluteLocation == 0)
                        {
                            return default(System.Collections.Generic.IList<System.String>);
                        }
                        else
                        {
                            return Read_965cfa073f8141b6b2258edfef21a64f(buffer, absoluteLocation);
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String> Values
                {
                    get
                    {
                        checked
                        {
                            if (!this.__hasIndex2)
                            {
                                this.__index2 = __ReadIndex2Value(this.buffer, this.offset);
                                this.__hasIndex2 = true;
                            }
                            return this.__index2;
                        }
                    }

                    set
                    {
                        checked
                        { throw new NotMutableException(); }
                    }
                }
            }



            private static void WriteInlineValueOf_10a1f5ab2bb147f5b674dbe72ebaf531<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                LibToFuzz.Attribute value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart, context);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    Span<byte> vtable = stackalloc byte[10];
                    int maxVtableIndex = -1;
                    vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                    var index0Value = value.Key;
                    var index0Offset = 0;
                    if (index0Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                        maxVtableIndex = 0;
                        currentOffset += 4;

                    }

                    var index1Value = value.Value;
                    var index1Offset = 0;
                    if (index1Value != default(System.String))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                        maxVtableIndex = 1;
                        currentOffset += 4;

                    }

                    var index2Value = value.Values;
                    var index2Offset = 0;
                    if (index2Value != default(System.Collections.Generic.IList<System.String>))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                        maxVtableIndex = 2;
                        currentOffset += 4;

                    }
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    int vtableLength = 6 + (2 * maxVtableIndex);
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                    if (index0Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index0Value,
                            index0Offset,
                            context);

                    }

                    if (index1Offset != 0)
                    {
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(
                            spanWriter,
                            span,
                            index1Value,
                            index1Offset,
                            context);

                    }

                    if (index2Offset != 0)
                    {
                        WriteInlineValueOf_965cfa073f8141b6b2258edfef21a64f(
                            spanWriter,
                            span,
                            index2Value,
                            index2Offset,
                            context);

                    }
                }
            }

            private static int GetMaxSizeOf_965cfa073f8141b6b2258edfef21a64f(System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int length = value.Count;
                    int runningSum = 7 + 7;
                    for (int i = 0; i < length; ++i)
                    {
                        var itemTemp = value[i];
                        SerializationHelpers.EnsureNonNull(itemTemp);
                        runningSum += GetMaxSizeOf_4b87f6351f154a6b81d408b81dbc7771(itemTemp);
                    }
                    return runningSum;
                }
            }

            private static System.Collections.Generic.IList<System.String> Read_965cfa073f8141b6b2258edfef21a64f<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_4e577eaf2db54d8c80b28f7d85f4f5e0<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_4e577eaf2db54d8c80b28f7d85f4f5e0<TInputBuffer> : FlatBufferVector<System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_4e577eaf2db54d8c80b28f7d85f4f5e0(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.String ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_4b87f6351f154a6b81d408b81dbc7771(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_965cfa073f8141b6b2258edfef21a64f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.String> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_4b87f6351f154a6b81d408b81dbc7771(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_719f1dd4426f4c4c88a86df475d80542(System.Collections.Generic.IList<System.Byte> value)
            {
                checked
                {
                    return 7 + 0 + (1 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<System.Byte> Read_719f1dd4426f4c4c88a86df475d80542<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_1f8fc26537434017acc16bd407c6f2fd<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        1)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_1f8fc26537434017acc16bd407c6f2fd<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_1f8fc26537434017acc16bd407c6f2fd(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_3c0d2ba17e5b45c9a9bd6fd047cc1a0b(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_719f1dd4426f4c4c88a86df475d80542<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<System.Byte> value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(1, count, 1);
                    spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                    spanWriter.WriteInt(span, count, vectorOffset, context);
                    vectorOffset += sizeof(int);
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        ;
                        WriteInlineValueOf_3c0d2ba17e5b45c9a9bd6fd047cc1a0b(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 1;
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_3c0d2ba17e5b45c9a9bd6fd047cc1a0b(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_3c0d2ba17e5b45c9a9bd6fd047cc1a0b<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_3c0d2ba17e5b45c9a9bd6fd047cc1a0b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset,
                SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset, context);
                }
            }
        }

        #endregion
    }
}
